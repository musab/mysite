<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 15 Apr 2024 16:40:29 +0900</lastBuildDate>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>implementing sso on gitlab community edition deployed to kubernetes</title>
      <link>//localhost:1313/posts/gitlab-sso/</link>
      <pubDate>Mon, 15 Apr 2024 16:40:29 +0900</pubDate>
      <guid>//localhost:1313/posts/gitlab-sso/</guid>
      <description>&lt;p&gt;I was recently tasked with setting up Single Sign-On (SSO) for our GitLab instance, which is deployed on our Kubernetes (EKS) instance. This deployment was carried out using &lt;a href=&#34;https://docs.gitlab.com/charts/&#34;&gt;GitLab&amp;rsquo;s Helm Charts&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The challenge I encountered was that most of the existing documentation provided instructions for setting up SSO on GitLab instances installed on a Linux box, and not for instances deployed using Helm Charts. I have documented the steps I took below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>generating ed25519 ssh deploy keys in Go</title>
      <link>//localhost:1313/posts/ed25519/</link>
      <pubDate>Tue, 05 Apr 2022 16:40:29 +0900</pubDate>
      <guid>//localhost:1313/posts/ed25519/</guid>
      <description>&lt;p&gt;Sharing with others, hoping it will help someone else someday.&lt;/p&gt;&#xA;&lt;p&gt;The task was to generate Ed25519 specific SSH keypairs in Go for the purpose of being used as deploy keys.&lt;/p&gt;&#xA;&lt;p&gt;Using &lt;code&gt;ssh-keygen&lt;/code&gt; gets you a PEM-encoded private key and a correctly encoded public key. You don&amp;rsquo;t get the same when using the &lt;a href=&#34;https://pkg.go.dev/crypto/ed25519&#34;&gt;crypto/ed25519&lt;/a&gt; package.&lt;/p&gt;&#xA;&lt;p&gt;Let us begin by first correctly encoding the public key.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Key &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;PublicKey                ed25519.PublicKey&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;PrivateKey               ed25519.PrivateKey&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;PublicKeyEncodedToString &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;GenerateEd25519Keys&lt;/span&gt;() (*Key, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; sshAlgoType = &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;ssh-ed25519&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pubKey, privKey, err := ed25519.&lt;span style=&#34;color:#ff0&#34;&gt;GenerateKey&lt;/span&gt;(rand.Reader)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pubPublicKey, err := ssh.&lt;span style=&#34;color:#ff0&#34;&gt;NewPublicKey&lt;/span&gt;(pubKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// pubPublicKey is not encoded in the correct format a typical VCS requires.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;//  - does not include the `ssh-ed25519` prefix&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// Here we prefix the public key with the algorithm type.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sshPubKey := sshAlgoType + &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + base64.StdEncoding.&lt;span style=&#34;color:#ff0&#34;&gt;EncodeToString&lt;/span&gt;(pubPublicKey.&lt;span style=&#34;color:#ff0&#34;&gt;Marshal&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &amp;amp;Key{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;PublicKey:                pubKey,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;PublicKeyEncodedToString: sshPubKey,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;PrivateKey:               privKey,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we PEM encode the private key. This is the same as the private key generated by &lt;code&gt;ssh-keygen&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
